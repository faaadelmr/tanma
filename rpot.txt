php artisan make:model Report -m
class Report extends Model
{
    protected $fillable = [
        'user_id',
        'report_category_id',
        'report_detail_id',
        'report_date',
        'selected_mini_detail',
        'notes'
    ];

    public function user()
    {
        return $this->belongsTo(User::class);
    }

    public function category()
    {
        return $this->belongsTo(ReportCategory::class, 'report_category_id');
    }

    public function detail()
    {
        return $this->belongsTo(ReportDetail::class, 'report_detail_id');
    }
}


php artisan make:model ReportCategory -m
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;

class ReportCategory extends Model
{
    protected $fillable = ['name', 'requires_date'];

    protected $casts = [
        'requires_date' => 'boolean'
    ];

    public function details()
    {
        return $this->hasMany(ReportDetail::class);
    }

    public function reports()
    {
        return $this->hasMany(Report::class);
    }
}


php artisan make:model ReportDetail -m
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;

class ReportDetail extends Model
{
    protected $fillable = ['report_category_id', 'detail_name', 'mini_details'];

    protected $casts = [
        'mini_details' => 'array'
    ];

    public function category()
    {
        return $this->belongsTo(ReportCategory::class, 'report_category_id');
    }

    public function reports()
    {
        return $this->hasMany(Report::class);
    }
}



migration:
//xxxx_create_report_categories_table.php
public function up()
{
    Schema::create('report_categories', function (Blueprint $table) {
        $table->id();
        $table->string('name');
        $table->boolean('requires_date')->default(false);
        $table->timestamps();
    });
}


//xxxx_create_report_details_table.php
public function up()
{
    Schema::create('report_details', function (Blueprint $table) {
        $table->id();
        $table->foreignId('report_category_id')->constrained()->onDelete('cascade');
        $table->string('detail_name');
        $table->json('mini_details'); // Store options as JSON
        $table->timestamps();
    });
}

//xxxx_create_reports_table.php
public function up()
{
    Schema::create('reports', function (Blueprint $table) {
        $table->id();
        $table->foreignId('user_id')->constrained()->onDelete('cascade');
        $table->foreignId('report_category_id')->constrained()->onDelete('cascade');
        $table->foreignId('report_detail_id')->constrained()->onDelete('cascade');
        $table->date('report_date')->nullable();
        $table->string('selected_mini_detail');
        $table->text('notes')->nullable();
        $table->timestamps();
    });
}

//route
Route::middleware(['auth'])->group(function () {
    Route::resource('reports', ReportController::class);
    Route::get('reports/details/{category}', [ReportController::class, 'getDetails']);
    Route::get('reports/mini-details/{detail}', [ReportController::class, 'getMiniDetails']);
});


php artisan make:controller ReportController --resource
<?php

namespace App\Http\Controllers;

use App\Models\Report;
use App\Models\ReportCategory;
use App\Models\ReportDetail;
use Illuminate\Http\Request;

class ReportController extends Controller
{
    public function index()
    {
        $reports = Report::with(['user', 'category', 'detail'])
            ->where('user_id', auth()->id())
            ->latest()
            ->paginate(10);

        return view('reports.index', compact('reports'));
    }

    public function create()
    {
        $categories = ReportCategory::all();
        return view('reports.create', compact('categories'));
    }

    public function store(Request $request)
    {
        $validated = $request->validate([
            'report_category_id' => 'required|exists:report_categories,id',
            'report_detail_id' => 'required|exists:report_details,id',
            'report_date' => 'nullable|date',
            'selected_mini_detail' => 'required|string',
            'notes' => 'nullable|string'
        ]);

        $validated['user_id'] = auth()->id();

        Report::create($validated);

        return redirect()->route('reports.index')
            ->with('success', 'Report created successfully.');
    }

    public function show(Report $report)
    {
        $this->authorize('view', $report);
        return view('reports.show', compact('report'));
    }

    public function edit(Report $report)
    {
        $this->authorize('update', $report);
        $categories = ReportCategory::all();
        $details = ReportDetail::where('report_category_id', $report->report_category_id)->get();

        return view('reports.edit', compact('report', 'categories', 'details'));
    }

    public function update(Request $request, Report $report)
    {
        $this->authorize('update', $report);

        $validated = $request->validate([
            'report_category_id' => 'required|exists:report_categories,id',
            'report_detail_id' => 'required|exists:report_details,id',
            'report_date' => 'nullable|date',
            'selected_mini_detail' => 'required|string',
            'notes' => 'nullable|string'
        ]);

        $report->update($validated);

        return redirect()->route('reports.index')
            ->with('success', 'Report updated successfully.');
    }

    public function destroy(Report $report)
    {
        $this->authorize('delete', $report);
        $report->delete();

        return redirect()->route('reports.index')
            ->with('success', 'Report deleted successfully.');
    }

    public function getDetails(ReportCategory $category)
    {
        return response()->json(
            ReportDetail::where('report_category_id', $category->id)->get()
        );
    }

    public function getMiniDetails(ReportDetail $detail)
    {
        return response()->json([
            'mini_details' => $detail->mini_details,
            'requires_date' => $detail->category->requires_date
        ]);
    }
}


